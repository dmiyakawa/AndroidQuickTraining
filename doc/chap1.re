= 一日目
== 「マインスイーパ」とは

 * http://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%A4%E3%83%BC%E3%83%91
 * http://minesweeperonline.com/#beginner

== 「マインスイーパ」の「仕様」を考える
=== どういう要素があるだろうか？

 * 爆弾が格子状に配置されている
 ** クリックすると開く
 ** 何もないところと爆弾のあるところ
 ** 何もないところでは「数字」が表示されることもある
 ** 右クリックで「旗」を立てられる
 * 爆弾を避けて全て掘れたら「クリア」

=== どう実装すればいいだろうか？

 * 最初に爆弾がどこにあるかを決めます
 ** ユーザに「爆弾が見えない」地図を見せます
 ** ユーザのクリックに応じて
 *** 爆弾でなければ開く
 *** 全部開いたら「クリア」、爆弾なら「ゲームオーバー」
 **** 細かい点を除くと、両方共「ゲームオーバー」でいい
 * もう少し細かく考えていく
 ** 盤面のサイズを 8x8 固定とします
 ** 爆弾の数も固定です
 ** 最初は爆弾の配置も固定にしましょう
 *** 次にランダムに配置することを考えます
 ** クリックしたら「爆弾」かそうでないかを判定します
 ** 終わったら次のゲームを開始できるようにしましょう
 *** スマホなので「終了」ボタンは要らないです
 * 旗や両ボタンクリックは今回はサポートしません

=== 「マインスイーパ」を作っていることを忘れないように！

今回盛りだくさんなので、色々と寄り道しますが、
迷ったら、「マインスイーパ」を作っていることを思い出してください。

 * 個々のパーツを覚えようとしなくていいです
 ** 慣れたら、調べればその都度出てきます
 * 「作りたいもの」があるはずです
 * そのためのパーツを集めて組み立てるイメージ。
 ** 「これは何のためにやってるの？」

== 簡単な「アプリ」(アプリケーション)を動かしてみる
=== 添付されているプロジェクトを眺めてみよう

==== 使用するツール類の概説

 * Eclipse
 ** http://ja.wikipedia.org/wiki/%E7%B5%B1%E5%90%88%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83
 ** 統合開発環境: ソフトウェア開発に必要な複数のツールをまとめたソフトウェア
 *** エディタ: 何かを編集するためのソフト。メモ帳のお化けみたいなもの
 *** コンパイラ: ソースコードから実際のソフトウェアとして動作する実行コードを生成するもの
 *** デバッガ: ぼっこわれた時にどこが壊れたか、どうやって壊れたかを調べる (デバッグ) ためのツール
 ** 便利機能がたくさんある -> 技術者はエディタの機能に慣れたり、機能を追加したりもする
 * Android SDK
 ** Androidのソフトウェア開発を行うための「ソフトウェア開発キット」
 * ADT Plugin for Eclipse... Android Developer Tools
 ** Eclipseは色々なソフトウェア開発に使う
 ** Android SDKとセットで用意することで「Eclipse上でAndroidアプリの開発を行えるようにする」ツールとなる。

==== アプリの構造を見ていく

===== AndroidManifest.xml

 * このアプリケーション全般に関する情報を記載する
 * アプリ名は？
 * アイコンに使う画像はどれ？
 * どういうデバイスにインストールしてもいいの？
 * 最初に起動する@<code>{Activity}はどれ？

===== Activity / Fragment

 * 画面を表示するための機能。今回は説明を省略する
 * 複雑な「インタラクション」を実現する場合、これらが複数になる
 * 今回の「マインスイーパ」では一つのActivity、一つのFragmentで良い
 * src/ ディレクトリ
 ** ソースコード == javaファイルは個々に収まる
 ** 一般的に、source code の一部を引っ張って"src"としてソースコードを収めることがよくある
 * res/ ディレクトリ
 ** リソース (resource) の略で、画像データや文字列データを保存する
 ** 今回はほとんど扱わないが、デバイスの大きさに合わせて複数の画像データが必要になったりする。
 * res/layout/
 ** リソースの中でも「レイアウト」と呼ばれるものを保存する。
 ** 今回はこれを駆使することになる
 ** 使い方は後述

==== 「エミュレータ」の中でこのアプリを実行する

 * チェックポイント: MainActivityDay1_0_Start.java
 * エミュレータ ... emulator -> emulate = 模倣する、真似する
 ** パソコンの中で実験出来ます
 ** 動作がとても遅いです
 ** GPSやカメラといった機構を使いづらい
 ** その他色々制約がある
 * 準備をすれば「実機」を使ってもアプリのテストが出来ます
 ** 実機 ... 本物の端末
 ** (アプリを実際に実機で動かしてみる)
 ** 使っているソースコードは同じものです。
 * 「開発中のアプリ」は同じソースコードでも「信頼」はされません
 ** 言ってみれば不正ソフトウェアにちょっと近い領域のアプリです
 ** 「信頼されていないソース」からのアプリです
 ** 「信頼されている」とは、すなわち「署名されている」アプリです。

==== プログラマは「0から始める」のがお好き

 * 慣習に若干近い……？
 ** 「複数のオリジンが混在する身近な例として、日時があげられる。年・月・日は1オリジンであるが、時・分・秒は0オリジンである。」
 ** http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%AA%E3%82%B8%E3%83%B3
 * Androidアプリで使われるJava言語では 0-origin を用いる
 * 今回は全く関係ないがメモリアドレスに関わる計算をする際の名残？と考えると分かりやすい
 ** addr+0 は先頭 (今ではlst[1]が最初でも不整合は生じない)
 * ファイル名でも1-originと0-originが混ざってますね (day1, day2 に対して _0_)

==== 「空白」「改行」「全角文字」に注意

 * プログラムの中では意味が当然違う。
 ** 特に「全角」はエラーになる (エラーと警告の違いについては後述)
 * おまけ: http://ja.wikipedia.org/wiki/Whitespace
 ** http://compsoc.dur.ac.uk/whitespace/count.ws

==== 開発者に役立つWebページ、メーリングリストなど

 * プロフェショナルもアマチュアも同じツール類で開発している
 ** シンセサイザーみたいに何十万もするツールとかは要らない
 *** 例外: 画像やUI関連では色々専門のツールを使うデザイナーがいます
 * アプリ開発にとりあえず必要なものが全て見えてしまっている
 ** 逆に言うと「初級者はめまいがする」
 * たくさんの「設定」を行なって、プログラムも書く。絵も適切な場所に入れる
 ** Androidの流儀、ルールというのがある。
 ** 毎度本家公式ページを見に行く
 * 資料やコミュニケーションは英語が主
 ** 日本人の開発者コミュニティ内であれば日本語を使いますが、開発元は英語でコミュニケーションを行います
 ** 英語がわからないと少なくとも「出遅れます」
 ** 市販の教科書が「間違って」いたりします
 * スマートフォンは非常に進化が速い

==== 参考になるWebサイト等

 * http://developer.android.com/
 * http://android-developers.blogspot.jp/
 * https://groups.google.com/forum/?hl=en#!forum/android-developers

 * http://www.android-group.jp/
 * https://github.com/TechBooster/AndroidOpenTextbook
 ** 教科書を作っています

==== 参考図書

 * 『Androidプログラミング入門 改訂2版』 2012/08/31 初版
 ** 知り合いが筆者 :-)
 ** (驚くことに)既に内容が古くなり始めている……

=== 部品を配置してみよう

初期状態となる@<code>{layout/mine_fragment_day1_0.xml}の中身は@<lst>[

//list[mine_fragment_day1_0][@<code>{layout/mine_fragment_day1_0.xml}]{
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
  xmlns:tools="http://schemas.android.com/tools"
  android:layout_width="match_parent"
  android:layout_height="match_parent"
  android:paddingBottom="@dimen/activity_vertical_margin"
  android:paddingLeft="@dimen/activity_horizontal_margin"
  android:paddingRight="@dimen/activity_horizontal_margin"
  android:paddingTop="@dimen/activity_vertical_margin"
  tools:context="com.example.training.MainActivity$PlaceholderFragment" >

  <TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/hello_world" />

</RelativeLayout>
//}

==== レイアウト

 * 家具のレイアウトなどと同じ感じで、レイアウトを指定するとAndroid OS本体が勝手によしなにしてくれる仕組みがある
 ** 個々のパーツを「ウィジェット」などと呼んだりすることがある。覚えなくて良い
 * 「レイアウトエディタ」 ... 「レイアウト」を編集するツール (復習: 「エディタ」)
 * @<code>{AndroidManifest.xml}に続いて、XML形式のファイルを再びいじります

==== res/layout/ 下のレイアウトファイル

 * 既出の@<code>{res/layout} の下にレイアウト設定ファイルがある。
 * 今回扱うレイアウトは3種類 (+ 初めに使われている1種類)
 ** @<code>{LinearLayout} @<code>{Button} @<code>{View} (@<code>{RelativeLayout})
 *** @<code>{LinearLayout} ... 横並び、縦並びに配置してください (Linear: 「直線の」「まっすぐ」)
 *** 「リニアモーターカー」のリニア
 *** @<code>{Button} ... ユーザが押せるボタンを配置してください
 *** @<code>{View} ... 「見える、何か」
 **** 実際には全てのパーツ(「ウィジェット」)は@<code>{View}を「継承」している。
 *** @<code>{TextView} ... 文字を表示します
 *** メッセージの表示に使います。
 *** @<code>{RelativeLayout} ... 「相対位置」を指定するものです
 **** 今回は使いません
 ** どう配置するかをXMLで指定する
 *** XML ... Extensible Markup Language
 *** とりあえず「設定ファイルで指定する」とでも覚えましょう
 ** 今は「レイアウトエディタ」というものが便利です
 *** また出ました。エディタ
 *** エディタ: 何かを編集するためのソフト
 **** http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF

==== RelativeLayoutをLinearLayoutに置き換える

 * 今回は@<code>{RelativeLayout}は使いません
 * @<code>{LinearLayout}にとりあえず変更します。
 ** 「横に並べる」「縦に並べる」だけであればこちらの方がはるかに楽なため


==== ボタンを配置する (MainActivityDay1_1_Show1Button.java)

 * @<code>{TextView}を@<code>{Button}へ変更する
 * このボタン大きすぎね？
 ** レイアウトエディタで遊んでみましょう
 * テキストを編集してみます。

===== 開発Tips: 「エラー」と「警告」に注意

 * (多分ミスるが、ミスっていなかったらここで@<code>{LinearLayout}のタイポなどをやってみる -> エラー)
 * (同様に、@<code>{@string/hello_world} を別の文字列に変えてしまう -> 警告)
 * ソースコードを「コンパイル」「ビルド」してアプリを作りますが
 ** 「エラー」: 「そ　れ　で　は　う　ご　き　ま　せ　ん」
 ** 「警告」: 「こんなことやってると、後で痛い目見るよ」
 * (デモ: 全角スペースをレイアウトに入れると謎のエラー)
 * エラー: 要は「それは、間違っている」
 ** プログラムはコンピュータから見た時に「厳密」である必要がある
 *** 空気読んでくれない
 *** ぶっちゃけると「出来る事ならば空気を読ませたくない」ものでもある
 ** 挙動はプログラム言語の「仕様」に記載されている
 * 警告の例: strings.xml を使わない
 ** これは「エラー」とは違う

==== ボタンを8つ並べる (MainActivityDay1_2_Show8Buttons.java)

 * 8つ並べます
 * ええと……縦にも並べたい……

==== マインスイーパ風にボタンを 8x8 に並べる (MainActivityDay1_3_Show88Buttons.java)

 * え、どうやってやるの
 * 一歩下がって「どうやって実現するか」を想像する -> 想像した方法がどう実現できるかを調べる
 * 「慌てるな、俺はマインスイーパの8x8の盤面を作りたいだけなんだ」
 * @<code>{LinearLayout} をもう一度考えてみよう
 ** @<code>{LinearLayout} ... 横並び、縦並びに配置してください
 * @<code>{LinearLayout} は別の@<code>{LinearLayout}を並べるのにも使えます！
 ** ボタンを8つ持つ@<code>{LinearLayout}を並べればいい
 * トップレベルのパーツ(「ウィジェット」)には特別な意味が色々あります
 ** 説明は省略しますが……
 ** ここでは「注意して」レイアウトを重ねてみましょう
 ** 説明を省略する事項
 *** match_parent, wrap_content
 * orientation... ？(´・ω・`)
 ** orientation ... 方向
 *** 新歓オリエンテーションとは関係がありません (同じ単語ですが)
 *** 英単語としては「方向を定める」といった感じのニュアンスです
 * @<code>{LinearLayout} をもう一度考えてみよう
 ** @<code>{LinearLayout} ... 横並び、縦並びに配置してください
 ** ……どっちよ
 ** 何も指定していない状況では……横並びです！
 * いわゆる「コピペ」作業発生！
 ** idがかぶります
 ** 一般的に「コピペ」は良くないとされます。
 ** 何故？
 *** 重複しては行けない情報が重複する
 *** 意味が分かってないことが多い
 *** 「コピペ」で出来るのならおそらく「自動化」出来る
 **** 素早く作業するのであれば自動化に勝る高速化はない
 * 3分間クッキングよろしく、作っておきました……！

===== ボタンについているidとは……?

 * ボタン一個一個にIDを振ってあります
 * @<code>{@+id/buttonXY}と今回はしました
 ** ボタンの「座標」を意識しています。

//list[table_again][マインスイーパの盤面]{
|| 00 || 10 || 20 || 30 || 40 || 50 || 60 || 70 ||
|| 01 || 11 || 21 || 31 || 41 || 51 || 61 || 71 ||
|| 02 || 12 || 22 || 32 || 42 || 52 || 62 || 72 ||
|| 03 || 13 || 23 || 33 || 43 || 53 || 63 || 73 ||
|| 04 || 14 || 24 || 34 || 44 || 54 || 64 || 74 ||
|| 05 || 15 || 25 || 35 || 45 || 55 || 65 || 75 ||
|| 06 || 16 || 26 || 36 || 46 || 56 || 66 || 76 ||
|| 07 || 17 || 27 || 37 || 47 || 57 || 67 || 77 ||
//}

 * vertical (縦) の @<code>{LinearLayout} の中に horizontal (横) の @<code>{LinearLayout} を入れています
 ** なので、@<code>{Button} のならびは 00, 10, 20, 30 ... となっている
 ** ややこしいので注意

==== 見た目をよりマインスイーパーっぽくする (mine_fragment_day1_4_better_88_buttons.xml)

 * ボタンの見た目がなんかアレですね
 * 「デフォルト」 (標準) のボタンの見栄えが今回のマインスイーパーに合ってないからです
 * 標準のボタンの見栄えを変える必要があります。
 ** 今回は深入りしませんが……結構面倒です
 ** 9 patch とは？ pressed？ focused？ disabled？
 * プログラマーの日常
 ** わからない時には割とオンラインで聞いたりします
 ** http://qiita.com/amedama/items/fb94c9665a6f7a4e7676
 ** https://github.com/dmiyakawa/crop_9patch_space

=== とりあえず「左上のボタン」を押した際に、何か仕事をさせる
==== このままではボタンを押しても何も起こりません

 * ボタンを押した時に、プログラムに「何かしてよ」と命令します。
 * どのボタンが何をするかを決める必要があります
 * 「どのボタン」を決めるのに「ID」(識別子)が必要です
 ** ID ... 同じ番号が割り振られていないことがとても重要 (当たり前だが)
 ** @<code>{@+id/button0} というのはそういうもの

==== イベントとイベントリスナーとは

 * 「何かが起きたとき」の何かをイベントと言う
 ** イベント
 * 「何かが起きたとき」に反応する仕組みを「イベントリスナー」と言う
 ** 卑近な例: ラジオで林原めぐみが話し始めたら勉強をやめてそっちを聞く
 *** 「ラジオで林原めぐみが話し始める」がイベント
 *** 自分がそのイベントの「リスナー」 (そしてラジオのリスナー)
 *** 「勉強をやめてそっちを聞く」はイベントを「聞いて」自分がなにかする
 * 「ボタンを押したとき」もイベント (@<code>{onClick})

==== ボタンに「イベントリスナー」を登録する

マイルストーン @<code>{MainActivityDay1_5_ButtonWithEvents.java}

 * やりたいこと「ボタンが押された時に……とりあえず文字を表示させる」
 ** 本当にやりたいことは「ボタンを押した時に爆弾があるかを判定すること」
 ** 順番にやっていく
 * @<code>{Fragment}が「ボタンを押したよ」という連絡を受け取れるようにする
 * @<code>{OnClickListener} ... ボタン押されたら何か仕事するもの
 ** 「ボタンを押したよ」 ... @<code>{OnClick} イベントと言う
 ** イベント ... 「何かあったよ」という話
 ** on click ... 「ボタンを押したとき」
 * 今はとりあえずログを出力してお茶を濁す
 ** クリックされた時に何か起きていることを示す！
 ** @<code>{android.util.Log} というパッケージがあります
 ** (パッケージ！未出！)


//list[onclick][onClick()ハンドラ]{
        public void onClick(View v) {
            Log.d("test", "Clicked!");
        }
//}

 * @<code>{onClick()} が追加されました
 ** メソッド、関数とは何……
 *** そこだけプログラムが「実行」します。
 *** 言ってみればモーターみたいな「部品」です
 *** 組み合わせます。


あなたはイベントを理解しました。

=== 一日目終了と復習

 * 目標: 「簡易のマインスイーパを作る」
 * 一日目ではとにかく「動く」ものを作った
 * 紹介した機能は大きく分ければたった二つだった: 「レイアウト」と「イベント」

==== これからやるべきこと

 * 仕様をもう一度見直す
  * ボタンを押したときに何が起こるのか
  * ゲームの終了条件は
  * リセットボタン？
